#cloud-config
package_update: true
package_upgrade: true

packages:
  - docker.io
  - docker-compose
  - python3
  - python3-pip
  - nodejs
  - npm
  - mysql-server
  - mongodb
  - nginx
  - certbot
  - python3-certbot-nginx
  - git
  - unzip
  - curl

write_files:
  - path: /etc/mysql/mysql.conf.d/mysqld.cnf
    content: |
      [mysqld]
      bind-address = 0.0.0.0
      port = 3306
      max_connections = 200
      innodb_buffer_pool_size = 1G
      
  - path: /etc/mongod.conf
    content: |
      storage:
        dbPath: /var/lib/mongodb
        journal:
          enabled: true
      systemLog:
        destination: file
        logAppend: true
        path: /var/log/mongodb/mongod.log
      net:
        port: 27017
        bindIp: 0.0.0.0
      processManagement:
        fork: true
        pidFilePath: /var/run/mongod.pid
        timeZoneInfo: /usr/share/zoneinfo

  - path: /opt/iot-agriculture/setup.sh
    content: |
      #!/bin/bash
      set -e
      
      echo "Configurando ambiente..."
      
      # Criar diretórios necessários
      mkdir -p /opt/iot-agriculture/data/{mysql,mongodb,redis}
      
      # Clonar o repositório
      if [ ! -d "/opt/iot-agriculture/repo" ]; then
        git clone https://github.com/seu-usuario/iot-agriculture-monitoring.git /opt/iot-agriculture/repo
      fi
      
      # Copiar arquivos necessários
      cp -r /opt/iot-agriculture/repo/* /opt/iot-agriculture/
      
      # Configurar permissões
      chown -R ubuntu:ubuntu /opt/iot-agriculture
      chmod -R 755 /opt/iot-agriculture
      
      # Instalar dependências do Node.js
      cd /opt/iot-agriculture/local-services/api-gateway
      npm install
      
      cd /opt/iot-agriculture/local-services/dashboard
      npm install
      
      # Instalar dependências Python
      cd /opt/iot-agriculture/local-services/data-processor
      pip3 install -r requirements.txt
      
      cd /opt/iot-agriculture/local-services/sensor-simulator
      pip3 install -r requirements.txt
      
      echo "Ambiente configurado com sucesso!"
    permissions: '0755'

  - path: /opt/iot-agriculture/start-services.sh
    content: |
      #!/bin/bash
      set -e
      
      echo "Iniciando serviços..."
      
      # Aguardar MySQL estar pronto
      echo "Aguardando MySQL..."
      max_attempts=30
      attempt=0
      while ! mysqladmin ping -h localhost -u root -p${mysql_root_password} --silent 2>/dev/null; do
          attempt=$((attempt + 1))
          if [ $attempt -ge $max_attempts ]; then
              echo "MySQL não ficou pronto em tempo hábil"
              exit 1
          fi
          sleep 5
      done
      
      # Aguardar MongoDB estar pronto
      echo "Aguardando MongoDB..."
      attempt=0
      while ! mongosh --eval "db.adminCommand('ping')" --quiet 2>/dev/null; do
          attempt=$((attempt + 1))
          if [ $attempt -ge $max_attempts ]; then
              echo "MongoDB não ficou pronto em tempo hábil"
              exit 1
          fi
          sleep 5
      done
      
      # Configurar banco de dados
      mysql -u root -p${mysql_root_password} < /opt/iot-agriculture/database/mysql/init.sql
      mongosh < /opt/iot-agriculture/database/mongodb/init.js
      
      # Construir imagens Docker
      cd /opt/iot-agriculture
      
      echo "Construindo imagens Docker..."
      docker build -t iot-agriculture/api-gateway:latest local-services/api-gateway
      docker build -t iot-agriculture/dashboard:latest local-services/dashboard
      docker build -t iot-agriculture/data-processor:latest local-services/data-processor
      docker build -t iot-agriculture/sensor-simulator:latest local-services/sensor-simulator
      
      # Iniciar serviços com Docker Compose
      docker-compose up -d
      
      # Configurar Nginx
      ln -sf /etc/nginx/sites-available/iot-agriculture /etc/nginx/sites-enabled/
      rm -f /etc/nginx/sites-enabled/default
      systemctl restart nginx
      
      echo "Todos os serviços iniciados com sucesso!"
    permissions: '0755'

  - path: /etc/nginx/sites-available/iot-agriculture
    content: |
      server {
          listen 80;
          server_name _;
          
          location /health {
              return 200 "OK";
              add_header Content-Type text/plain;
          }
          
          location / {
              proxy_pass http://localhost:8080;
              proxy_set_header Host $host;
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto $scheme;
          }
          
          location /api/ {
              proxy_pass http://localhost:3000/;
              proxy_set_header Host $host;
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto $scheme;
          }
      }

runcmd:
  # Configurar Docker
  - systemctl enable docker
  - systemctl start docker
  - usermod -aG docker ubuntu
  
  # Configurar MySQL
  - systemctl enable mysql
  - systemctl start mysql
  - sleep 15
  - mysql -u root -e "ALTER USER 'root'@'localhost' IDENTIFIED BY '${mysql_root_password}';"
  
  # Configurar MongoDB
  - systemctl enable mongod
  - systemctl start mongod
  
  # Executar scripts de setup
  - cd /opt/iot-agriculture
  - ./setup.sh
  - ./start-services.sh
  
  # Configurar logs
  - mkdir -p /var/log/iot-agriculture
  - chown -R ubuntu:ubuntu /var/log/iot-agriculture
  
  # Configurar backup automático
  - echo "0 2 * * * root /opt/iot-agriculture/backup.sh" > /etc/cron.d/iot-agriculture-backup